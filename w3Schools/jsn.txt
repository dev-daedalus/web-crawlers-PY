<i>array</i>.concat(<i>array</i>)	<div><b>Array method</b>&nbsp;that joins two or more arrays. It returns a new array, containing the joined arrays.</div>		<i>array</i>.concat(<i>array</i>, ...<i>arrayN</i>)		ES1	
<i>array</i>.copyWithin(<i>target</i>)	<b>Array method</b> that copies array elements within the array, to and from specified positions.	Modifies original array in place.	<i>array</i>.copyWithin(<i>target</i>, <i>start=0</i>, <i>end=array.length</i>)		ES6	
<i>array</i>.entries()	<b>&nbsp;Array method </b>that returns an Array Iterator object with key/value pairs.	The entries() method does not change the original array.		"<span style=""color: mediumblue;"">const</span>&nbsp;fruits = [<span style=""color: brown;"">""Banana""</span>,&nbsp;<span style=""color: brown;"">""Orange""</span>,&nbsp;<span style=""color: brown;"">""Apple""</span>,&nbsp;<span style=""color: brown;"">""Mango""</span>];<br><span style=""color: mediumblue;"">const</span>&nbsp;f = fruits.entries(); <br><font color=""#555753"">//f = [[0,&nbsp;""Banana""], [1,&nbsp;""Orange""], [2,&nbsp;""Apple""], [3,&nbsp;""Mango""]];<br></font>"		
<i>array</i>.every(<i>func</i>)	<b>Array method </b>that returns true if every element in the array returns true for the given function.			"<span style=""color: mediumblue;"">const</span>&nbsp;ages = [<span style=""color: red;"">32</span>,&nbsp;<span style=""color: red;"">33</span>,&nbsp;<span style=""color: red;"">16</span>,&nbsp;<span style=""color: red;"">40</span>];<br><br>ages.every(checkAge)<br><span style=""color: red;""></span><br><span style=""color: mediumblue;"">function</span>&nbsp;checkAge(age) {<br>&nbsp;&nbsp;<span style=""color: mediumblue;"">return</span>&nbsp;age &gt;&nbsp;<span style=""color: red;"">18</span>;<br>}"		
<div><div><i>array</i>.fill(<i>value</i>)</div></div>	<b>Array method&nbsp;</b>that fills specified elements in an array with a value.	<div>Start and end position can be specified. If not, all elements will be filled.</div>	<div><div><i>array</i>.fill(<em>value, start, end</em>)</div></div>	"<span style=""color: mediumblue;"">const</span>&nbsp;fruits = [<span style=""color: brown;"">""Banana""</span>,&nbsp;<span style=""color: brown;"">""Orange""</span>,&nbsp;<span style=""color: brown;"">""Apple""</span>,&nbsp;<span style=""color: brown;"">""Mango""</span>];<br>fruits.fill(<span style=""color: brown;"">""Kiwi""</span>,&nbsp;<span style=""color: red;"">2</span>,&nbsp;<span style=""color: red;"">4</span>); <font color=""#555753"">// [ Banana, Orange, Kiwi, Kiwi ]</font>"	ES6	
<i>array</i>.filter(<em>function(currentValue</em>))	<div><b>Array method</b> that creates a new array filled with elements that pass a test provided by a function, and returnes a new array.</div>	"Doesn't edit the current array."	<div><div><i>array</i>.filter(<em>function(currentValue, index, arr), thisValue=undefined</em>)</div></div>	"<span style=""color: mediumblue;"">const</span>&nbsp;ages = [<span style=""color: red;"">32</span>,&nbsp;<span style=""color: red;"">33</span>,&nbsp;<span style=""color: red;"">16</span>,&nbsp;<span style=""color: red;"">40</span>];<br><span style=""color: mediumblue;"">const</span>&nbsp;result = ages.filter(checkAdult);<br><span style=""color: red;""></span><br><span style=""color: mediumblue;"">function</span>&nbsp;checkAdult(age) {<br><span style=""color: red;""></span>&nbsp;&nbsp;<span style=""color: mediumblue;"">return</span>&nbsp;age &gt;=&nbsp;<span style=""color: red;"">18</span>;<br>}"	ES6	
<i>boolean</i>.toString()	<b>Boolean method </b>that converts a boolean value to a string, and returns the result.	Every JavaScript object has a toString() method.			ES1	
<i>boolean</i>.valueOf()	<b>Boolean method </b>that returns the primitive value of a boolean.	Usually called by JavaScript behind the scenes, and not explicitly in code.			ES1	
<div><div><i>boolean</i>.constructor</div></div>	<b>Boolean&nbsp;property</b>&nbsp;that returns the function that created the Boolean prototype.	For JavaScript booleans the constructor property returns: function Boolean() { [native code] }			ES1	
Boolean.prototype	<b>Boolean property&nbsp;</b>that allows you to add new properties and methods to booleans.	Prototype is a property available with all JavaScript objects. <br>You are not advised to change the prototype of an object that you do not control.	Boolean.prototype.<i>name&nbsp;</i>=&nbsp;<i>value</i>		ES1	
Do booleans capitilize there first letter in JavaScript.	Yes					ES1	
<b>Statement:</b> break	<b>Statement</b> that exits a switch or a loop.			"<font color=""#555753"">// example 1: loop<br></font><font color=""#0000cd"">let</font>&nbsp;text =&nbsp;<span style=""color: brown;"">""""</span>;<br><span style=""color: mediumblue;"">for</span>&nbsp;(<span style=""color: mediumblue;"">let</span>&nbsp;i =&nbsp;<span style=""color: red;"">0</span>; i &lt;&nbsp;<span style=""color: red;"">5</span>; i++) {<br><span style=""color: red;""></span>&nbsp;&nbsp;<span style=""color: mediumblue;"">if</span>&nbsp;(i ===&nbsp;<span style=""color: red;"">3</span>)&nbsp;<span style=""color: mediumblue;"">break</span>;<br><span style=""color: red;""></span>&nbsp;&nbsp;text += i +&nbsp;<span style=""color: brown;"">""&lt;br&gt;""</span>;<br><span style=""color: red;""></span>}<br><span style=""color: mediumblue;""><br></span><span style=""color: rgb(85, 87, 83);"">// example 2: switch/case</span><br style=""color: rgb(85, 87, 83);""><span style=""color: mediumblue;"">let</span>&nbsp;day;<br><span style=""color: mediumblue;"">switch</span>&nbsp;(<span style=""color: mediumblue;"">new</span>&nbsp;Date().getDay()) {<br><span style=""color: red;""></span>&nbsp;&nbsp;<span style=""color: mediumblue;"">case</span>&nbsp;<span style=""color: red;"">0</span>:<br><span style=""color: red;""></span>&nbsp; &nbsp; day =&nbsp;<span style=""color: brown;"">""Sunday""</span>;<br><span style=""color: red;""></span>&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: mediumblue;"">break</span>;<br><span style=""color: red;""></span>&nbsp;&nbsp;<span style=""color: mediumblue;"">case</span>&nbsp;<span style=""color: red;"">1</span>:<br><span style=""color: red;""></span>&nbsp; &nbsp; day =&nbsp;<span style=""color: brown;"">""Monday""</span>;<br><span style=""color: red;""></span>&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: mediumblue;"">break</span>;<br><span style=""color: red;""></span>&nbsp;&nbsp;<span style=""color: mediumblue;"">case</span>&nbsp;<span style=""color: red;"">2</span>:<br><span style=""color: red;""></span>&nbsp; &nbsp; day =&nbsp;<span style=""color: brown;"">""Tuesday""</span>;<br><span style=""color: red;""></span>&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: mediumblue;"">break</span>;<br><span style=""color: red;""></span>&nbsp;&nbsp;<span style=""color: mediumblue;"">case</span>&nbsp;<span style=""color: red;"">3</span>:<br><span style=""color: red;""></span>&nbsp; &nbsp; day =&nbsp;<span style=""color: brown;"">""Wednesday""</span>;<br><span style=""color: red;""></span>&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: mediumblue;"">break</span>;<br>}"	ES1	
<b>Statement:</b>&nbsp;class	<b>Statement</b>&nbsp;that declares a class.	<div><div>Unlike functions, class declarations are not hoisted (you must declare a class before you can use it).</div></div>		"<span style=""color: green;"">// Create a Car class<br></span><span style=""color: mediumblue;"">class</span>&nbsp;Car {<br><span style=""color: red;""></span>constructor(brand) {<br><span style=""color: red;""></span>&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: mediumblue;"">this</span>.carname&nbsp;= brand;<br><span style=""color: red;""></span>&nbsp; }<br><span style=""color: red;""></span>}<br><span style=""color: red;""></span><br><span style=""color: red;""></span><span style=""color: green;"">// Create a Car Object<br></span>myCar =&nbsp;<span style=""color: mediumblue;"">new</span>&nbsp;Car(<span style=""color: brown;"">""Ford""</span>);"	ES6	
<b>Statement:</b>&nbsp;const	<b>Statement</b>&nbsp;that declares a variable with a constant value.	Constant values can not be reassigned (although values, properties and other attributes may be altered).		"<span style=""color: mediumblue;"">const</span>&nbsp;car = {type:<span style=""color: brown;"">""Fiat""</span>, model:<span style=""color: brown;"">""500""</span>, color:<span style=""color: brown;"">""white""</span>};<br><font color=""#555753"">// car = 33; would throw an error<br></font><span style=""color: rgb(85, 87, 83);"">// car.type = 33; would change the type to 33 with no errors</span><br style=""color: rgb(85, 87, 83);"">"	ES6	
<b>Statement:</b>&nbsp;continue	<b>Statement</b>&nbsp;that&nbsp;breaks one iteration (in the loop) if a specified condition occurs, and continues with the next iteration in the loop.	"The difference between continue and the break statement, is instead of ""jumping out"" of a loop, the continue statement ""jumps over"" one iteration in the loop."	<div><div>continue<i>&nbsp;labelname;</i></div></div>	"<font color=""#555753"">// example 1<br></font><span style=""color: mediumblue;"">let</span>&nbsp;text =&nbsp;<span style=""color: brown;"">""""</span>;<br><span style=""color: mediumblue;"">for</span>&nbsp;(<span style=""color: mediumblue;"">let</span>&nbsp;i =&nbsp;<span style=""color: red;"">0</span>; i &lt;&nbsp;<span style=""color: red;"">5</span>; i++) {<br><span style=""color: red;""></span>&nbsp;&nbsp;<span style=""color: mediumblue;"">if</span>&nbsp;(i ===&nbsp;<span style=""color: red;"">3</span>)&nbsp;<span style=""color: mediumblue;"">continue</span>;<br><span style=""color: red;""></span>&nbsp;&nbsp;text += i +&nbsp;<span style=""color: brown;"">""&lt;br&gt;""</span>;<br><span style=""color: red;""></span>}<br><br><span style=""color: rgb(85, 87, 83);"">// example 2<br></span><span style=""color: mediumblue;"">let</span>&nbsp;text =&nbsp;<span style=""color: brown;"">""""</span>;<br><span style=""color: mediumblue;"">let</span>&nbsp;i =&nbsp;<span style=""color: red;"">0</span>;<br><span style=""color: mediumblue;"">while</span>&nbsp;(i &lt;&nbsp;<span style=""color: red;"">5</span>) {<br><span style=""color: red;""></span>&nbsp; i++;<br><span style=""color: red;""></span>&nbsp;&nbsp;<span style=""color: mediumblue;"">if</span>&nbsp;(i ===&nbsp;<span style=""color: red;"">3</span>)&nbsp;<span style=""color: mediumblue;"">continue</span>;<br><span style=""color: red;""></span>&nbsp;&nbsp;text += i +&nbsp;<span style=""color: brown;"">""&lt;br&gt;""</span>;<br><span style=""color: red;""></span>}<br style=""color: rgb(85, 87, 83);"">"	ES1	
<b>Statement:</b>&nbsp;debugger	<b>Statement</b>&nbsp;that stops the execution of JavaScript, and calls (if available) the debugging function.	<div>If no debugging is available, the debugger statement has no effect.</div>		"<span style=""color: mediumblue;"">let</span>&nbsp;x =&nbsp;<span style=""color: red;"">15</span>&nbsp;*&nbsp;<span style=""color: red;"">5</span>;<br><span style=""color: mediumblue;"">debugger</span>;<br><font color=""#555753"">// everything after this line will only show up when the debugger is off</font>"	ES1	
<b>Statement:</b>&nbsp;do ... while	<b>Statement</b>&nbsp;that executes a block of statements and repeats the block while a condition is true (executes at least once).	The do...while is used when you want to run a code block at least one time. 	"<span style=""color: mediumblue;"">do</span>&nbsp;{<br><span style=""color: red;""></span><i>&nbsp; code block to be executed<br></i>}<br><span style=""color: mediumblue;"">while</span>&nbsp;(<em>condition</em>);"	"<span style=""color: mediumblue;"">let</span>&nbsp;text =&nbsp;<span style=""color: brown;"">""""</span>;<br><span style=""color: mediumblue;"">let</span>&nbsp;i =&nbsp;<span style=""color: red;"">0</span>;<br><span style=""color: mediumblue;"">do</span>&nbsp;{<br><span style=""color: red;""></span>&nbsp;&nbsp;text += i +&nbsp;<span style=""color: brown;"">""&lt;br&gt;""</span>;<br><span style=""color: red;""></span>&nbsp; i++;<br><span style=""color: red;""></span>}<br><span style=""color: mediumblue;"">while</span>&nbsp;(i &lt;&nbsp;<span style=""color: red;"">5</span>);"	ES1	
<b>Statement:</b>&nbsp;for	<b>Statement</b>&nbsp;that loops through a block of code a number of times.	<div>If you omit statement 2, you must provide a break inside the loop.</div>	"<i><span style=""color: mediumblue;"">for</span>&nbsp;(statement&nbsp;<span style=""color: red;"">1</span>; statement&nbsp;<span style=""color: red;"">2</span>; statement&nbsp;<span style=""color: red;"">3</span>) {<br>&nbsp;&nbsp;code block to be executed<br>}</i>"	"<span style=""color: mediumblue;"">const</span>&nbsp;cars = [<span style=""color: brown;"">""BMW""</span>,&nbsp;<span style=""color: brown;"">""Volvo""</span>,&nbsp;<span style=""color: brown;"">""Saab""</span>,&nbsp;<span style=""color: brown;"">""Ford""</span>];<br><span style=""color: mediumblue;"">for</span>&nbsp;(<span style=""color: mediumblue;"">let</span>&nbsp;i =&nbsp;<span style=""color: red;"">0</span>; i &lt; cars.length; i++) {<br><span style=""color: red;""></span>&nbsp;&nbsp;text += cars[i] +&nbsp;<span style=""color: brown;"">""&lt;br&gt;""</span>;<br><span style=""color: red;""></span>}"	ES1	
<b>Statement:</b>&nbsp;for ... in	<b>Statement</b>&nbsp;that loops through the properties of an object.		"<i><span style=""color: mediumblue;"">for</span>&nbsp;(x</i>&nbsp;<span style=""color: mediumblue;"">in</span><span style=""color: red;"">&nbsp;</span><i>object) {<br>&nbsp;&nbsp;code block to be executed<br>}</i>"	"<font color=""#555753"">// example 1<br></font>constperson = {fname:<span style=""color: brown;"">""John""</span>, lname:<span style=""color: brown;"">""Doe""</span>, age:<span style=""color: red;"">25</span>};<br><span style=""color: mediumblue;"">let</span>&nbsp;text =&nbsp;<span style=""color: brown;"">""""</span>;<br><span style=""color: mediumblue;"">for</span>&nbsp;(<span style=""color: mediumblue;"">let</span>&nbsp;x&nbsp;<span style=""color: mediumblue;"">in</span>&nbsp;person) {<br><span style=""color: red;""></span>&nbsp; text += person[x] +&nbsp;<span style=""color: brown;"">"" ""</span>;<br><span style=""color: red;""></span>}<br><br><font color=""#555753"">// example 2<br></font><span style=""color: mediumblue;"">const</span>&nbsp;cars = [<span style=""color: brown;"">""BMW""</span>,&nbsp;<span style=""color: brown;"">""Volvo""</span>,&nbsp;<span style=""color: brown;"">""Saab""</span>,&nbsp;<span style=""color: brown;"">""Ford""</span>];<br><span style=""color: mediumblue;"">let</span>&nbsp;text =&nbsp;<span style=""color: brown;"">""""</span>;<br><span style=""color: mediumblue;"">for</span>&nbsp;(<span style=""color: mediumblue;"">let</span>&nbsp;x&nbsp;<span style=""color: mediumblue;"">in</span>&nbsp;cars) {<br><span style=""color: red;""></span>&nbsp; text += cars[x] +&nbsp;<span style=""color: brown;"">"" ""</span>;<br><span style=""color: red;""></span>}"	ES1	
<b>Statement:</b>&nbsp;for ... of&nbsp;	<b>Statement</b>&nbsp;that loops through the values of an iterable object.		"<i><span style=""color: mediumblue;"">for</span>&nbsp;(x</i>&nbsp;of&nbsp;<i>iterable) {<br>&nbsp;&nbsp;code block to be executed<br>}</i>"	"<font color=""#555753"">// example 1<br></font><span style=""color: mediumblue;"">let</span>&nbsp;text =&nbsp;<span style=""color: brown;"">""""</span>;<br><span style=""color: mediumblue;"">const</span>&nbsp;cars = [<span style=""color: brown;"">'BMW'</span>,&nbsp;<span style=""color: brown;"">'Volvo'</span>,&nbsp;<span style=""color: brown;"">'Mini'</span>];<br><span style=""color: mediumblue;"">for</span>&nbsp;(<span style=""color: mediumblue;"">let</span>&nbsp;x of cars) {<br><span style=""color: red;""></span>&nbsp; text += x +&nbsp;<span style=""color: brown;"">"" ""</span>;<br><span style=""color: red;""></span>}<br><br><span style=""color: rgb(85, 87, 83);"">// example 2</span><br style=""color: rgb(85, 87, 83);""><span style=""color: mediumblue;"">let</span>&nbsp;text =&nbsp;<span style=""color: brown;"">""JavaScript""</span>;<br><span style=""color: mediumblue;"">for</span>&nbsp;(<span style=""color: mediumblue;"">let</span>&nbsp;x of text) {<br><span style=""color: red;""></span>&nbsp; text += x +&nbsp;<span style=""color: brown;"">"" ""</span>;<br><span style=""color: red;""></span>}"	ES6	
<b>Statement:</b>&nbsp;function	<b>Statement</b>&nbsp;that declares a function.		"<span style=""color: mediumblue;"">function</span>&nbsp;<i><em>functionName</em></i>(<i><em>parameter</em>s</i>)<i>&nbsp;{<br><span style=""color: red;""></span>&nbsp;&nbsp;<em>code to be executed</em><br><span style=""color: red;""></span>}</i>"	"<span style=""color: green;"">// Declare a function<br></span><span style=""color: mediumblue;"">function</span>&nbsp;myFunction() {<br><span style=""color: red;""></span>&nbsp;&nbsp;document.getElementById(<span style=""color: brown;"">""demo""</span>).innerHTML&nbsp;=&nbsp;<span style=""color: brown;"">""Hello World!""</span>;<br><span style=""color: red;""></span>}<br><span style=""color: red;""></span><br><span style=""color: red;""></span><span style=""color: green;"">// Call the function<br></span>myFunction();"	ES1	
<b>Statement:</b>&nbsp;if ... else ... else if	<b>Statement</b>&nbsp;that marks a block of statements to be executed depending on a condition.		"<span style=""color: mediumblue;"">if</span>&nbsp;(<i>condition1</i>) {<br><span style=""color: red;""></span><em>&nbsp;&nbsp;<span style=""color: green;"">// block of code to be executed if condition1 is true<br></span><span style=""color: red;""></span></em>}&nbsp;<span style=""color: mediumblue;"">else</span>&nbsp;<span style=""color: mediumblue;"">if</span>&nbsp;(<i>condition2</i>) {<br><span style=""color: red;""></span><em>&nbsp;&nbsp;<span style=""color: green;"">// block of code to be executed if the condition1 is false and condition2 is true</span></em><br><span style=""color: red;""></span>}&nbsp;<span style=""color: mediumblue;"">else</span>&nbsp;{<br><span style=""color: red;""></span><em>&nbsp;&nbsp;<span style=""color: green;"">// block of code to be executed if the condition1 is false and condition2 is false<br></span><span style=""color: red;""></span></em>}"		ES1	
<b>Statement:</b>&nbsp;let	<b>Statement</b>&nbsp;that declares a <b>local</b> variable.		<div><div>let&nbsp;<em>name</em>&nbsp;=&nbsp;<em>value</em>;</div></div>		ES6	
<b>Statement:</b>&nbsp;return	<b>Statement</b>&nbsp;that stops the execution of a function and returns a value from that function.		"<div><div>return&nbsp;<em>value</em>; <font color=""#555753"">// value optional&nbsp;</font></div></div>"	"<span style=""color: mediumblue;"">function</span>&nbsp;myFunction() {<br>&nbsp;&nbsp;<span style=""color: mediumblue;"">return</span>&nbsp;Math.PI;<br>}"	ES1	
<b>Statement:</b>&nbsp;switch ... case ... default	<b>Statement</b>&nbsp;that&nbsp;marks a block of statements to be executed depending on different cases.		"<span style=""color: mediumblue;"">switch</span>(<em>expression</em>) {<br><span style=""color: red;""></span>&nbsp;&nbsp;<span style=""color: mediumblue;"">case</span>&nbsp;<em>n</em>:<br><span style=""color: red;""></span><em>&nbsp;&nbsp;&nbsp; code block<br><span style=""color: red;""></span></em>&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: mediumblue;"">break</span>;<br><span style=""color: red;""></span>&nbsp;&nbsp;<span style=""color: mediumblue;"">case</span>&nbsp;<em>n</em>:<br><span style=""color: red;""></span><em>&nbsp;&nbsp;&nbsp; code block<br><span style=""color: red;""></span></em>&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: mediumblue;"">break</span>;<br><span style=""color: red;""></span>&nbsp;&nbsp;<span style=""color: mediumblue;"">default</span>:<br><span style=""color: red;""></span><em>&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: mediumblue;"">default</span>&nbsp;code block<br><span style=""color: red;""></span></em>}"	"<span style=""color: mediumblue;"">var</span>&nbsp;text;<br><span style=""color: mediumblue;"">var</span>&nbsp;fruits = document.getElementById(<span style=""color: brown;"">""myInput""</span>).value;<br><br><span style=""color: red;""></span><span style=""color: mediumblue;"">switch</span>(fruits) {<br>&nbsp;&nbsp;<span style=""color: mediumblue;"">case</span>&nbsp;<span style=""color: brown;"">""Banana""</span>:<br>&nbsp;&nbsp;&nbsp; text =&nbsp;<span style=""color: brown;"">""Banana is good!""</span>;<br><span style=""color: red;""></span>&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: mediumblue;"">break</span>;<br><span style=""color: red;""></span>&nbsp;&nbsp;<span style=""color: mediumblue;"">case</span>&nbsp;<span style=""color: brown;"">""Orange""</span>:<br>&nbsp;&nbsp;&nbsp; text =&nbsp;<span style=""color: brown;"">""I am not a fan of orange.""</span>;<br><span style=""color: red;""></span>&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: mediumblue;"">break</span>;<br>&nbsp;&nbsp;<span style=""color: mediumblue;"">case</span>&nbsp;<span style=""color: brown;"">""Apple""</span>:<br>&nbsp;&nbsp;&nbsp; text =&nbsp;<span style=""color: brown;"">""How you like them apples?""</span>;<br><span style=""color: red;""></span>&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: mediumblue;"">break</span>;<br>&nbsp;&nbsp;<span style=""color: mediumblue;"">default</span>:<br><span style=""color: red;""></span>&nbsp;&nbsp;&nbsp;<span style=""color: red;"">&nbsp;</span>text =&nbsp;<span style=""color: brown;"">""I have never heard of that fruit...""</span>;<br>}"	ES1	
<b>Statement:</b>&nbsp;throw	<b>Statement</b>&nbsp;that&nbsp;throws (generates) an error.	Allows you to create a custom error.	<div><div>throw&nbsp;<em>expression</em>;</div></div>	"<span style=""color: mediumblue;"">throw</span>&nbsp;<span style=""color: brown;"">""Too big""</span>;&nbsp;&nbsp;<span style=""color: green;"">// throw a text<br></span><span style=""color: mediumblue;"">throw</span>&nbsp;<span style=""color: red;"">500</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: green;"">// throw a number<br></span><span style=""color: mediumblue;"">throw</span>&nbsp;<span style=""color: mediumblue;"">false</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: green;"">// throw a boolean<br></span><span style=""color: mediumblue;"">throw</span>&nbsp;person;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: green;"">// throw an object</span>"	ES3	
<b>Statement:</b>&nbsp;try ... catch ... finally	<b>Statement</b>&nbsp;that&nbsp;marks the block of statements to be executed when an error occurs in a try block, and implements error handling.		"<span style=""color: mediumblue;"">try</span>&nbsp;{<br>&nbsp;&nbsp;<em>tryCode - Code block to run<br></em>}<br><span style=""color: mediumblue;"">catch</span>(<em>err</em>) {<br><span style=""color: red;""></span>&nbsp;&nbsp;<em>catchCode -<span style=""color: red;"">&nbsp;</span>Code block to handle errors<br></em>}<br><span style=""color: mediumblue;"">finally</span>&nbsp;{<br>&nbsp;&nbsp;<em>finallyCode - Code block to be executed regardless of the&nbsp;<span style=""color: mediumblue;"">try</span>&nbsp;result<br></em>}"		ES3	
<b>Statement:</b>&nbsp;var	<b>Statement</b>&nbsp;that declares a <b>global</b> variable.	ECMAScript6 (ES6 / JavaScript 2015) encourage you to declare variables with let not var.	<div><div>var&nbsp;<em>name</em>&nbsp;=&nbsp;<em>value</em>;</div></div>		ES1	
<b>Statement:</b>&nbsp;while	"<b>Statement</b> that marks a block of statements to be executed while a condition is true. Doesn't execute if the condition is false.&nbsp;"	"Unlike the ""do ... while"" loop the while loop does not ever execute if the statement is false."	"<span style=""color: mediumblue;"">while</span>&nbsp;(condition) {<br>&nbsp;<font color=""#868888""> // code block to be executed</font><br>}"		ES1	
<i>class</i>.constructor()	<b>Class method </b>for creating and initializing objects created within a class	This method is called automatically when a new instance of that class is made.	<div><div><i>class</i>.constructor(<em>parameters</em>)</div></div>	"<span style=""color: mediumblue;"">class</span>&nbsp;Car {<br>&nbsp;<span style=""color: red;"">&nbsp;</span>constructor(brand) {&nbsp;&nbsp;<span style=""color: green;"">// Constructor<br></span>&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: mediumblue;"">this</span>.carname&nbsp;= brand;<br>&nbsp;<span style=""color: red;"">&nbsp;</span>}<br>}<br>mycar =&nbsp;<span style=""color: mediumblue;"">new</span>&nbsp;Car(<span style=""color: brown;"">""Ford""</span>);"	ES6	
<b>Class Keyword: </b>extends	<b>Class keyword</b> that is used to create a child class of another class (parent).	"<div>By calling the&nbsp;<code>super()</code>&nbsp;method in the constructor method, we call the parent's constructor method and gets access to the parent's properties and methods.</div>"	<div><div>class&nbsp;<em>childClass&nbsp;</em>extends&nbsp;<em>parentClass</em></div></div>		ES6	
<b>Class Keyword: </b>static	"<b style="""">Class keyword</b> that defines a static method for a class."		<div><div>static&nbsp;<em>methodName</em>()</div></div>	"<span style=""color: mediumblue;"">class</span>&nbsp;Car {<br>&nbsp; constructor(brand) {<br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: mediumblue;"">this</span>.carname&nbsp;=&nbsp;<span style=""color: red;""></span>brand;<br>&nbsp;<span style=""color: red;"">&nbsp;</span>}<br>&nbsp;&nbsp;<span style=""color: mediumblue;"">static</span>&nbsp;hello(x) {<br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: mediumblue;"">return</span>&nbsp;<span style=""color: brown;"">""Hello ""</span>&nbsp;+&nbsp;<span style=""color: red;""></span>x.carname;<br>&nbsp;<span style=""color: red;"">&nbsp;</span>}<br>}<br>mycar =&nbsp;<span style=""color: mediumblue;"">new</span>&nbsp;Car(<span style=""color: brown;"">""Ford""</span>);<br>Car.hello(mycar);<font color=""#555753""> // Returns ""Hello Ford""</font>"	ES6	
<b>Class Keyword: </b>super	<b>Class keyword </b>that refers to the parent class.		"<span style=""color: mediumblue;"">super</span>(<em><span style=""color: mediumblue;"">arguments</span></em>);&nbsp;&nbsp;<span style=""color: green;"">// calls the parent constructor (only inside the constructor)<br></span><span style=""color: mediumblue;"">super</span>.<em>parentMethod</em>(<em><span style=""color: mediumblue;"">arguments</span></em>);"	"<span style=""color: mediumblue;"">class</span>&nbsp;Car {<br>&nbsp; constructor(brand) {<br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: mediumblue;"">this</span>.carname&nbsp;=&nbsp;<span style=""color: red;""></span>brand;<br>&nbsp;<span style=""color: red;"">&nbsp;</span>}<br>&nbsp; present() {<br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: mediumblue;"">return</span>&nbsp;<span style=""color: brown;"">'I have a '</span>&nbsp;+&nbsp;<span style=""color: mediumblue;"">this</span>.carname;<br>&nbsp;<span style=""color: red;"">&nbsp;</span>}<br>}<br><br><span style=""color: mediumblue;"">class</span>&nbsp;Model&nbsp;<strong><span style=""color: mediumblue;"">extends</span></strong>&nbsp;Car {<br>&nbsp;<span style=""color: red;"">&nbsp;</span>constructor(brand, mod) {<br>&nbsp;&nbsp;&nbsp;&nbsp;<strong><span style=""color: mediumblue;"">super</span>(brand);</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: mediumblue;"">this</span>.model&nbsp;= mod;<br>&nbsp;<span style=""color: red;"">&nbsp;</span>}<br>&nbsp; show() {<br>&nbsp;&nbsp;&nbsp;<span style=""color: red;"">&nbsp;</span><span style=""color: mediumblue;"">return</span>&nbsp;<span style=""color: mediumblue;"">this</span>.present() +&nbsp;<span style=""color: brown;"">', it is a '</span>&nbsp;+&nbsp;<span style=""color: mediumblue;"">this</span>.model;<br>&nbsp;<span style=""color: red;"">&nbsp;</span>}<br>}"	ES6	
JSON.parse(<i>string</i>)	<b>JSON method </b>that parses a JSON string and returns a JavaScript object.		JSON.parse(<i>string</i>,&nbsp;<i>function</i>)	"<div><span style=""color: mediumblue;"">var</span>&nbsp;obj = JSON.parse(<span style=""color: brown;"">'{""firstName"":""John"", ""lastName"":""Doe""}'</span>);</div>"	ES5	
<div><div>JSON.stringify(<em>obj</em>)</div></div>	<b>JSON method </b>that converts JavaScript objects into strings.	<div>When sending data to a web server the data has to be a string.</div>	<div><div>JSON.stringify(<em>obj, replacer, space</em>)</div></div>		ES5	
What JSON data types are allowed? (6 total)	<ul><li>a string</li><li>a number</li><li>an object (containing valid JSON values)</li><li>an array</li><li>a boolean</li><li><em>null</em></li></ul>					ES5	
What JSON data types are <b>not</b> allowed? (3 total)	<ul><li>a function</li><li>a date</li><li><em>undefined</em></li></ul>					ES5	
What is JSON?	<b>JavaScript Object Notation</b> - JSON is a format for storing and transporting data.&nbsp;JSON is text, and text can be transported anywhere, and read by any programming language.		<div>JavaScript Objects can be converted into JSON, and JSON can be converted back into JavaScript Objects. This way we can work with the data as JavaScript objects, with no complicated parsing or translations.</div>				
How many number types does JavaScript have?	<div>JavaScript has only one type of number.</div>		Numbers can be written with, or without, decimals.			ES1	
Number.isInteger(<i>value</i>)	<b>Number method </b>that checks whether a value is an integer.				ES6	
<div><div>Number.isNaN(<em>value</em>)</div></div>	<b>Number method</b> that returns true if the value is NaN, and the type is a Number, else false.	<div>In JavaScript,&nbsp;<code>NaN</code>&nbsp;is a number that is not a legal number, it stands for Not a Number.</div>		"<span style=""color: green;"">// This returns true;<br></span>isNaN(<span style=""color: brown;"">'Hello'</span>);<br><span style=""color: green;""><br>// This returns false;<br></span>Number.isNaN(<span style=""color: brown;"">'Hello'</span>);"	ES6	
Number.isSafeInteger(<i>value</i>)	<b>Number method</b> that checks whether a value is a safe integer.	Safe integer refers to a numbers ability to be represented as a number (smaller than 2^53 - 1).			ES6	
<i>number</i>.toExponental()	<b>Number method </b>that converts a number into an exponential notation.	<i>x </i>value optional. An integer between 0 and 20 representing the number of digits in the notation after the decimal point. If omitted, it is set to as many digits as necessary to represent the value.	<i>number</i>.toExponental(<i>x</i>)		ES3	
<i>number</i>.toFixed()	<b>Number method&nbsp;</b>that formats a number with x numbers of digits after the decimal point.	The representation of a number with (or without) decimals.	<i>number</i>.toFixed(<i>x=0</i>)		ES3	
<i>number</i>.toLocalString()	<b>Number method&nbsp;</b>that converts a number into a string, based on the locale settings.		<div><div><i>number</i>.toLocaleString(<em>locales</em>,&nbsp;<em>options</em>)</div></div>	"<span style=""color: mediumblue;"">let</span>&nbsp;num =&nbsp;<span style=""color: red;"">1000000</span>;<br><span style=""color: mediumblue;"">let</span>&nbsp;text = num.toLocaleString(<span style=""color: brown;"">""en-US""</span>, {style:<span style=""color: brown;"">""currency""</span>, currency:<span style=""color: brown;"">""USD""</span>});"	ES3	
<div><div><i>number</i>.toPrecision()</div></div>	<div><b>Number method</b> that formats a number to a specified length.</div>	If no value is provided it will return the number with no formatting.	<div><div><i>number</i>.toPrecision(<i>x</i>)</div></div>	"<span style=""color: mediumblue;"">let</span>&nbsp;num =&nbsp;<span style=""color: red;"">13.3714</span>;<br>num.toPrecision(<span style=""color: red;"">2</span>); <font color=""#555753"">// 13</font><br>num.toPrecision(<span style=""color: red;"">3</span>); // 13.4<br>num.toPrecision(<span style=""color: red;"">10</span>); <font color=""#555753"">// 13.37140000</font>"	ES3	
<div><div><i>number</i>.toString()</div></div>	<b>Number method</b> that returns the number as a string.	All JavaScript objects hace a toString method.<br>The radix like the modulo the number operates on (normal is 10, 2 is binary,&nbsp;16 is hex).&nbsp;	<i>number</i>.toString(<em>radix=10</em>)		ES1	
<div><div><i>number</i>.valueOf()</div></div>	<b>Number method&nbsp;</b>that returns the primitive value of a number.	Usually called by JavaScript under the hood, and not in the actuall viewed code.&nbsp;			ES1	
Number.constructor	"<b>Number property</b> that returns the function that created JavaScript's Number prototype."				ES1	
<div><div>Number.isFinite(<em>value</em>)</div></div>	<b>Number method</b> that returns&nbsp;true&nbsp;if a number is a finite number.			"<span style=""color: green;"">// This returns true<br></span>isFinite(<span style=""color: brown;"">""123""</span>)<br><br><span style=""color: green;"">// This returns false<br></span>Number.isFinite(<span style=""color: brown;"">""123""</span>)"		
What is the difference between&nbsp;isFinite() and Number.isFinite()?	isFinite() returns true if a value is a finite number. Number.isFinite() returns true if a number is a finite number. In other words: isFinite() converts the value to a number before testing it.					ES6	
<div><div>Number.MAX_VALUE</div></div>	<b>Number property </b>that returns the max value a JavaScript number can be.	Returns: 1.7976931348623157e+308			ES1	
Number.MIN_VALUE	<b>Number property&nbsp;</b>that returns the min value a JavaScript number can be.	Returns: 5e-324			ES1	
<div><div>Number.NEGATIVE_INFINITY</div></div>	<b>Number property</b> that returns negative infinity.				ES1	
Number.NaN	<b>Number method </b>that returns NaN.	Returns the same as the global NaN method.			ES1	
Number.POSITIVE_INFINITY	<b>Number method</b> that returns positive infinity.				ES1	
Number.prototype	<div><b>Number property</b> that allows you to add new properties and methods to numbers. <br></div>	All JavaScript objects have the prototype property.<br>You are not advised to change the prototype of an object that you do not control.	<div><div>Number.prototype.<em>name&nbsp;</em>=<em>&nbsp;value</em></div></div>			
JavaScript Operators:<br><ul><li>{{c1::Addition}}: {{c2::+}}</li><li>{{c1::Subtraction}}: {{c2::-}}</li><li>{{c1::Multiplication}}: {{c2::*}}</li><li>{{c1::Division}}: {{c2::/}}</li><li>{{c1::Modulus}}: {{c2::%}}</li><li>{{c1::Increment}}: {{c2::++}}</li><li>{{c1::Decrement}}: {{c2::--}}</li></ul>		ES1	
Assignment Operators<br><ul><li>{{c1::Set value}}: {{c2::=}}</li><li>{{c1::Subtract from value}}: {{c2::-=}}</li><li>{{c1::Add to value}}: {{c2::+=}}</li><li>{{c1::Multiply by value}}: {{c2::*=}}</li><li>{{c1::Divide by value}}: {{c2::/=}}</li><li>{{c1::To the modulus of value}}: {{c2::%=}}</li></ul>		ES1	
How do you do a teranary operator in JavaScript?		<i>variablename</i> = <i>condition</i>&nbsp;? <i>value1</i> : <i>value2</i>					
Fill out the following code to complete the ternary operation:<br><br>{{c1::<i>conditionToEvaluate</i>}} {{c2::?}} {{c1::<i>ifTrueValue</i>}} {{c2:::}} {{c1::<i>ifFalseValue</i>}}		ES1	
String Operators<br><ul><li>{{c1::Addition}}: {{c2::+}}</li><li>{{c1::Add to value}}: {{c2::+=}}</li></ul>		ES1	
Comparison Operators:<br><ul><li>{{c2::Equal to}}: {{c1::==}}</li><li>{{c2:: Equal to and equal type}}: {{c1::===}}</li><li>{{c2::Not equal}}: {{c1::!=}}</li><li>{{c2::Not equal value or not equal type}}: {{c1::!==}}</li><li>{{c2:: Greater than }}: {{c1::&gt;}}</li><li>{{c2:: Greater than or equal to}}: {{c1::&gt;=}}</li><li>{{c2::Less than}}: {{c1::&lt;}}</li><li>{{c2::Less than or equal to}}: {{c1::&lt;=}}<br></li></ul>		ES1	
Logical Operators:<br><ul><li>{{c1::and}}: {{c2::&amp;&amp;}}</li><li>{{c1::or}}: {{c2::||}}</li><li>{{c1::not}}: {{c2::!}}</li></ul>		ES1	
Bitwise Operators:<br><ul><li>{{c1::AND}}: {{c2::&amp;}}<br></li><li>{{c1::OR}}: {{c2::|}}</li><li>{{c1::NOT}}: {{c2::~}}</li><li>{{c1::XOR}}: {{c2::^}}</li><li>{{c1::Left shift}}: {{c2::&lt;&lt;}}</li><li>{{c1::Right shift}}: {{c2::&gt;&gt;}}</li></ul>		ES1	
<b>Operator: </b>typeof	<b>Operator</b>&nbsp;that returns the type of a variable, object, function or expression.			"<span style=""color: mediumblue;"">typeof</span>&nbsp;<span style=""color: brown;"">""John""</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: red;""></span><span style=""color: green;"">// Returns string<br></span><span style=""color: mediumblue;"">typeof</span>&nbsp;<span style=""color: red;"">3.14</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: red;""></span><span style=""color: green;"">// Returns number<br></span><span style=""color: mediumblue;"">typeof</span>&nbsp;<span style=""color: mediumblue;"">NaN</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: red;""></span><span style=""color: green;"">// Returns number<br></span><span style=""color: mediumblue;"">typeof</span>&nbsp;<span style=""color: mediumblue;"">false</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: red;"">&nbsp;</span><span style=""color: green;"">// Returns boolean<br></span><span style=""color: mediumblue;"">typeof</span>&nbsp;[<span style=""color: red;"">1</span>,&nbsp;<span style=""color: red;"">2</span>,&nbsp;<span style=""color: red;"">3</span>,&nbsp;<span style=""color: red;"">4</span>]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: green;"">// Returns object<br></span><span style=""color: mediumblue;"">typeof</span>&nbsp;{name:<span style=""color: brown;"">'John'</span>, age:<span style=""color: red;"">34</span>}&nbsp;<span style=""color: red;"">&nbsp;</span><span style=""color: green;"">// Returns object<br></span><span style=""color: mediumblue;"">typeof</span>&nbsp;<span style=""color: mediumblue;"">new</span>&nbsp;Date()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: red;""></span><span style=""color: green;"">// Returns object<br></span><span style=""color: mediumblue;"">typeof</span>&nbsp;<span style=""color: mediumblue;"">function</span>&nbsp;() {} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: green;"">// Returns function<br></span><span style=""color: mediumblue;"">typeof</span>&nbsp;myCar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: red;""></span><span style=""color: green;"">// Returns undefined (if myCar is not declared)<br></span><span style=""color: mediumblue;"">typeof</span>&nbsp;<span style=""color: mediumblue;"">null</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: red;""></span><span style=""color: green;"">// Returns object</span>"		
<b>Operator: </b>delete	<b>Operator</b> that deletes a property from an object.			"<span style=""color: mediumblue;"">const</span>&nbsp;person = {<br><span style=""color: red;""></span>&nbsp;&nbsp;firstName:<span style=""color: brown;"">""John""</span>,<br><span style=""color: red;""></span>&nbsp;&nbsp;lastName:<span style=""color: brown;"">""Doe""</span>,<br><span style=""color: red;""></span>&nbsp;&nbsp;age:<span style=""color: red;"">50</span>,<br><span style=""color: red;""></span>&nbsp;&nbsp;eyeColor:<span style=""color: brown;"">""blue""</span><br><span style=""color: red;""></span>};<br><span style=""color: mediumblue;"">delete</span>&nbsp;person.age;&nbsp;&nbsp;&nbsp;<span style=""color: green;"">// or delete person[""age""];</span>"	ES6	
<b>Operator:</b> instanceof	<b>Operator</b> that returns true if the specified object is an instance of the specified object.				ES1	
<b>Operator:</b> in	<b>Operator </b>that returns true if the specified property is in the specified object, otherwise false.			"<span style=""color: green;"">// Arrays<br></span><span style=""color: mediumblue;"">const</span>&nbsp;cars = [<span style=""color: brown;"">""Saab""</span>,&nbsp;<span style=""color: brown;"">""Volvo""</span>,&nbsp;<span style=""color: brown;"">""BMW""</span>];<br><span style=""color: brown;"">""Saab""</span>&nbsp;<span style=""color: mediumblue;"">in</span>&nbsp;cars&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: green;"">// Returns false (specify the index number instead of value)<br></span><span style=""color: red;"">0</span>&nbsp;<span style=""color: mediumblue;"">in</span>&nbsp;cars&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: green;"">// Returns true<br></span><span style=""color: red;"">1</span>&nbsp;<span style=""color: mediumblue;"">in</span>&nbsp;cars&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: green;"">// Returns true<br></span><span style=""color: red;"">4</span>&nbsp;<span style=""color: mediumblue;"">in</span>&nbsp;cars&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: green;"">// Returns false (does not exist)<br></span><span style=""color: brown;"">""length""</span>&nbsp;<span style=""color: mediumblue;"">in</span>&nbsp;cars&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: green;"">// Returns true&nbsp; (length is an Array property)<br></span><br><span style=""color: green;"">// Objects<br></span><span style=""color: mediumblue;"">const</span>&nbsp;person = {firstName:<span style=""color: brown;"">""John""</span>, lastName:<span style=""color: brown;"">""Doe""</span>, age:<span style=""color: red;"">50</span>};<br><span style=""color: brown;"">""firstName""</span>&nbsp;<span style=""color: mediumblue;"">in</span>&nbsp;person&nbsp;&nbsp;&nbsp;<span style=""color: green;"">// Returns true<br></span><span style=""color: brown;"">""age""</span>&nbsp;<span style=""color: mediumblue;"">in</span>&nbsp;person&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: green;"">// Returns true<br></span><br><span style=""color: green;"">// Predefined objects<br></span><span style=""color: brown;"">""PI""</span>&nbsp;<span style=""color: mediumblue;"">in</span>&nbsp;Math&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: green;"">// Returns true<br></span><span style=""color: brown;"">""NaN""</span>&nbsp;<span style=""color: mediumblue;"">in</span>&nbsp;Number&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: green;"">// Returns true<br></span><span style=""color: brown;"">""length""</span>&nbsp;<span style=""color: mediumblue;"">in</span>&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=""color: green;"">// Returns true</span>"		
<b>Operator:</b> void	<b>Operator</b> that evaluates an expression and returns undefined.&nbsp;	"This operator is often used to obtain the undefined primitive value, using ""void(0)"" (useful when evaluating an expression without using the return value)."		"void function test() {<br>&nbsp; console.log('boo!');<br>&nbsp; // expected output: ""boo!""<br>}();<br><br>try {<br>&nbsp; test();<br>} catch (e) {<br>&nbsp; console.log(e);<br>&nbsp; // expected output: ReferenceError: test is not defined<br>}"		
<b>Global Method:</b> decodeURI()						
<b>Global Method:</b>&nbsp;decodeURIComponent()						
<b>Global Method:</b>&nbsp;encodeURI()						
<b>Global Method:</b>&nbsp;encodeURIComponent()						
<b>Global Method:</b>&nbsp;escape()						
<b>Global Method:</b>&nbsp;eval()						
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Array&lt;/div&gt;         &lt;div id=""front""&gt;&lt;i&gt;array&lt;/i&gt;.concat(&lt;i&gt;array&lt;/i&gt;)&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;script&gt; ...&lt;i&gt;arrayN&lt;/i&gt;)&lt;/div&gt; = a Array&lt;/div&gt; array, arrays. arrays.&lt;/div&gt;&lt;/div&gt; containing deck deck.innerText.split( dName document.getElementById(deck); id=additional-info&gt;&lt;/div&gt; id=back&gt;&lt;div&gt;&lt;b&gt;Array id=example&gt;&lt;/div&gt; id=front&gt;&lt;i&gt;array&lt;/i&gt;.concat(&lt;i&gt;array&lt;/i&gt;)&lt;/div&gt; id=options&gt;&lt;i&gt;array&lt;/i&gt;.concat(&lt;i&gt;array&lt;/i&gt;, id=version&gt;ES1&lt;/div&gt; It joined joins method&lt;/b&gt;&amp;nbsp;that more new or returns the two
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Array&lt;/div&gt;         &lt;div id=""front""&gt;&lt;div&gt;&lt;b&gt;Array method&lt;/b&gt;&amp;nbsp;that joins two or more arrays. It returns a new array, containing the joined arrays.&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[0] + "" - "" + dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;script&gt; ...&lt;i&gt;arrayN&lt;/i&gt;)&lt;/div&gt; = a Array&lt;/div&gt; array, arrays. arrays.&lt;/div&gt;&lt;/div&gt; containing deck deck.innerText.split( dName document.getElementById(deck); id=additional-info&gt;&lt;/div&gt; id=back&gt;&lt;i&gt;array&lt;/i&gt;.concat(&lt;i&gt;array&lt;/i&gt;)&lt;/div&gt; id=example&gt;&lt;/div&gt; id=front&gt;&lt;div&gt;&lt;b&gt;Array id=options&gt;&lt;i&gt;array&lt;/i&gt;.concat(&lt;i&gt;array&lt;/i&gt;, id=version&gt;ES1&lt;/div&gt; It joined joins method&lt;/b&gt;&amp;nbsp;that more new or returns the two
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Array&lt;/div&gt;         &lt;div id=""front""&gt;&lt;i&gt;array&lt;/i&gt;.copyWithin(&lt;i&gt;target&lt;/i&gt;)&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;i&gt;end=array.length&lt;/i&gt;)&lt;/div&gt; &lt;i&gt;start=0&lt;/i&gt;, &lt;script&gt; = and array Array&lt;/div&gt; array, copies deck deck.innerText.split( dName document.getElementById(deck); elements from id=additional-info&gt;Modifies id=back&gt;&lt;b&gt;Array id=example&gt;&lt;/div&gt; id=front&gt;&lt;i&gt;array&lt;/i&gt;.copyWithin(&lt;i&gt;target&lt;/i&gt;)&lt;/div&gt; id=options&gt;&lt;i&gt;array&lt;/i&gt;.copyWithin(&lt;i&gt;target&lt;/i&gt;, id=version&gt;ES6&lt;/div&gt; in method&lt;/b&gt; original place.&lt;/div&gt; positions.&lt;/div&gt; specified that the to within
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Array&lt;/div&gt;         &lt;div id=""front""&gt;&lt;b&gt;Array method&lt;/b&gt; that copies array elements within the array, to and from specified positions.&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[0] + "" - "" + dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;i&gt;end=array.length&lt;/i&gt;)&lt;/div&gt; &lt;i&gt;start=0&lt;/i&gt;, &lt;script&gt; = and array Array&lt;/div&gt; array, copies deck deck.innerText.split( dName document.getElementById(deck); elements from id=additional-info&gt;Modifies id=back&gt;&lt;i&gt;array&lt;/i&gt;.copyWithin(&lt;i&gt;target&lt;/i&gt;)&lt;/div&gt; id=example&gt;&lt;/div&gt; id=front&gt;&lt;b&gt;Array id=options&gt;&lt;i&gt;array&lt;/i&gt;.copyWithin(&lt;i&gt;target&lt;/i&gt;, id=version&gt;ES6&lt;/div&gt; in method&lt;/b&gt; original place.&lt;/div&gt; positions.&lt;/div&gt; specified that the to within
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Boolean&lt;/div&gt;         &lt;div id=""front""&gt;&lt;i&gt;boolean&lt;/i&gt;.toString()&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/b&gt;that &lt;/div&gt; &lt;div &lt;script&gt; = a and boolean Boolean&lt;/div&gt; converts deck deck.innerText.split( dName document.getElementById(deck); has id=additional-info&gt;Every id=back&gt;&lt;b&gt;Boolean id=example&gt;&lt;/div&gt; id=front&gt;&lt;i&gt;boolean&lt;/i&gt;.toString()&lt;/div&gt; id=options&gt;&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; JavaScript method method.&lt;/div&gt; object result.&lt;/div&gt; returns string, the to toString() value
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Boolean&lt;/div&gt;         &lt;div id=""front""&gt;&lt;i&gt;boolean&lt;/i&gt;.valueOf()&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/b&gt;that &lt;/div&gt; &lt;div &lt;script&gt; = a and behind Boolean&lt;/div&gt; boolean.&lt;/div&gt; by called code.&lt;/div&gt; deck deck.innerText.split( dName document.getElementById(deck); explicitly id=additional-info&gt;Usually id=back&gt;&lt;b&gt;Boolean id=example&gt;&lt;/div&gt; id=front&gt;&lt;i&gt;boolean&lt;/i&gt;.valueOf()&lt;/div&gt; id=options&gt;&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; in JavaScript method not of primitive returns scenes, the value
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Boolean&lt;/div&gt;         &lt;div id=""front""&gt;&lt;b&gt;Boolean method &lt;/b&gt;that converts a boolean value to a string, and returns the result.&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[0] + "" - "" + dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/b&gt;that &lt;/div&gt; &lt;div &lt;script&gt; = a and boolean Boolean&lt;/div&gt; converts deck deck.innerText.split( dName document.getElementById(deck); has id=additional-info&gt;Every id=back&gt;&lt;i&gt;boolean&lt;/i&gt;.toString()&lt;/div&gt; id=example&gt;&lt;/div&gt; id=front&gt;&lt;b&gt;Boolean id=options&gt;&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; JavaScript method method.&lt;/div&gt; object result.&lt;/div&gt; returns string, the to toString() value
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Boolean&lt;/div&gt;         &lt;div id=""front""&gt;&lt;b&gt;Boolean method &lt;/b&gt;that returns the primitive value of a boolean.&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[0] + "" - "" + dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/b&gt;that &lt;/div&gt; &lt;div &lt;script&gt; = a and behind Boolean&lt;/div&gt; boolean.&lt;/div&gt; by called code.&lt;/div&gt; deck deck.innerText.split( dName document.getElementById(deck); explicitly id=additional-info&gt;Usually id=back&gt;&lt;i&gt;boolean&lt;/i&gt;.valueOf()&lt;/div&gt; id=example&gt;&lt;/div&gt; id=front&gt;&lt;b&gt;Boolean id=options&gt;&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; in JavaScript method not of primitive returns scenes, the value
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Boolean&lt;/div&gt;         &lt;div id=""front""&gt;Boolean.prototype&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;br&gt;You &lt;div &lt;script&gt; = a add advised all allows an and are available Boolean&lt;/div&gt; booleans.&lt;/div&gt; change control.&lt;/div&gt; deck deck.innerText.split( dName do document.getElementById(deck); id=additional-info&gt;Prototype id=back&gt;&lt;b&gt;Boolean id=example&gt;&lt;/div&gt; id=front&gt;Boolean.prototype&lt;/div&gt; id=options&gt;Boolean.prototype.&lt;i&gt;name&amp;nbsp;&lt;/i&gt;=&amp;nbsp;&lt;i&gt;value&lt;/i&gt;&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; is JavaScript methods new not object objects. of properties property property&amp;nbsp;&lt;/b&gt;that prototype that the to with you
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Boolean&lt;/div&gt;         &lt;div id=""front""&gt;&lt;b&gt;Boolean property&amp;nbsp;&lt;/b&gt;that allows you to add new properties and methods to booleans.&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[0] + "" - "" + dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;br&gt;You &lt;div &lt;script&gt; = a add advised all allows an and are available Boolean&lt;/div&gt; booleans.&lt;/div&gt; change control.&lt;/div&gt; deck deck.innerText.split( dName do document.getElementById(deck); id=additional-info&gt;Prototype id=back&gt;Boolean.prototype&lt;/div&gt; id=example&gt;&lt;/div&gt; id=front&gt;&lt;b&gt;Boolean id=options&gt;Boolean.prototype.&lt;i&gt;name&amp;nbsp;&lt;/i&gt;=&amp;nbsp;&lt;i&gt;value&lt;/i&gt;&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; is JavaScript methods new not object objects. of properties property property&amp;nbsp;&lt;/b&gt;that prototype that the to with you
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Boolean&lt;/div&gt;         &lt;div id=""front""&gt;                 Do booleans capitilize there first letter in JavaScript.         &lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;script&gt; = Boolean&lt;/div&gt; booleans capitilize deck deck.innerText.split( dName do document.getElementById(deck); first id=additional-info&gt;&lt;/div&gt; id=back-basic&gt; id=back-code&gt; id=example&gt;&lt;/div&gt; id=front&gt; id=options&gt;&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; in JavaScript. letter there Yes
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::JSON&lt;/div&gt;         &lt;div id=""front""&gt;&lt;div&gt;&lt;div&gt;JSON.stringify(&lt;em&gt;obj&lt;/em&gt;)&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/b&gt;that &lt;/div&gt; &lt;div &lt;script&gt; = a be converts data deck deck.innerText.split( dName document.getElementById(deck); has id=additional-info&gt;&lt;div&gt;When id=back&gt;&lt;b&gt;JSON id=example&gt;&lt;/div&gt; id=front&gt;&lt;div&gt;&lt;div&gt;JSON.stringify(&lt;em&gt;obj&lt;/em&gt;)&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; id=options&gt;&lt;div&gt;&lt;div&gt;JSON.stringify(&lt;em&gt;obj, id=version&gt;ES5&lt;/div&gt; into JavaScript JSON&lt;/div&gt; method objects replacer, sending server space&lt;/em&gt;)&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; string.&lt;/div&gt;&lt;/div&gt; strings.&lt;/div&gt; the to web
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::JSON&lt;/div&gt;         &lt;div id=""front""&gt;&lt;b&gt;JSON method &lt;/b&gt;that converts JavaScript objects into strings.&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[0] + "" - "" + dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/b&gt;that &lt;/div&gt; &lt;div &lt;script&gt; = a be converts data deck deck.innerText.split( dName document.getElementById(deck); has id=additional-info&gt;&lt;div&gt;When id=back&gt;&lt;div&gt;&lt;div&gt;JSON.stringify(&lt;em&gt;obj&lt;/em&gt;)&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; id=example&gt;&lt;/div&gt; id=front&gt;&lt;b&gt;JSON id=options&gt;&lt;div&gt;&lt;div&gt;JSON.stringify(&lt;em&gt;obj, id=version&gt;ES5&lt;/div&gt; into JavaScript JSON&lt;/div&gt; method objects replacer, sending server space&lt;/em&gt;)&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; string.&lt;/div&gt;&lt;/div&gt; strings.&lt;/div&gt; the to web
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::JSON&lt;/div&gt;         &lt;div id=""front""&gt;                 What JSON data types are allowed? (6 total)         &lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;script&gt; &lt;ul&gt;&lt;li&gt;a (6 (containing = allowed? are array&lt;/li&gt;&lt;li&gt;a boolean&lt;/li&gt;&lt;li&gt;&lt;em&gt;null&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt; data deck deck.innerText.split( dName document.getElementById(deck); id=additional-info&gt;&lt;/div&gt; id=back-basic&gt; id=back-code&gt; id=example&gt;&lt;/div&gt; id=front&gt; id=options&gt;&lt;/div&gt; id=version&gt;ES5&lt;/div&gt; JSON JSON&lt;/div&gt; number&lt;/li&gt;&lt;li&gt;an object string&lt;/li&gt;&lt;li&gt;a total) types valid values)&lt;/li&gt;&lt;li&gt;an What
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::JSON&lt;/div&gt;         &lt;div id=""front""&gt;                 What JSON data types are &lt;b&gt;not&lt;/b&gt; allowed? (3 total)         &lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;b&gt;not&lt;/b&gt; &lt;div &lt;script&gt; &lt;ul&gt;&lt;li&gt;a (3 = allowed? are data date&lt;/li&gt;&lt;li&gt;&lt;em&gt;undefined&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt; deck deck.innerText.split( dName document.getElementById(deck); function&lt;/li&gt;&lt;li&gt;a id=additional-info&gt;&lt;/div&gt; id=back-basic&gt; id=back-code&gt; id=example&gt;&lt;/div&gt; id=front&gt; id=options&gt;&lt;/div&gt; id=version&gt;ES5&lt;/div&gt; JSON JSON&lt;/div&gt; total) types What
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::JSON&lt;/div&gt;         &lt;div id=""front""&gt;                 What is JSON?         &lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;b&gt;JavaScript &lt;div &lt;script&gt; - = a and any anywhere, as back be by can complicated converted data data.&amp;nbsp;JSON deck deck.innerText.split( dName document.getElementById(deck); for format id=additional-info&gt;&lt;div&gt;JavaScript id=back-basic&gt; id=back-code&gt; id=example&gt;&lt;/div&gt; id=front&gt; id=options&gt;&lt;/div&gt; id=version&gt;&lt;/div&gt; into is JavaScript JSON JSON&lt;/div&gt; JSON, JSON? language. no Notation&lt;/b&gt; object objects objects, objects. or parsing programming read storing text text, the This translations.&lt;/div&gt;&lt;/div&gt; transported transporting way we What with work
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;                 How many number types does JavaScript have?         &lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;div&gt;JavaScript &lt;script&gt; = be can decimals.&lt;/div&gt; deck deck.innerText.split( dName document.getElementById(deck); does has have? How id=additional-info&gt;Numbers id=back-basic&gt; id=back-code&gt; id=example&gt;&lt;/div&gt; id=front&gt; id=options&gt;&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; JavaScript many number Number&lt;/div&gt; number.&lt;/div&gt; of one only or type types with, without, written
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;Number.isInteger(&lt;i&gt;value&lt;/i&gt;)&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/b&gt;that &lt;/div&gt; &lt;div &lt;script&gt; = a an checks deck deck.innerText.split( dName document.getElementById(deck); id=additional-info&gt;&lt;/div&gt; id=back&gt;&lt;b&gt;Number id=example&gt;&lt;/div&gt; id=front&gt;Number.isInteger(&lt;i&gt;value&lt;/i&gt;)&lt;/div&gt; id=options&gt;&lt;/div&gt; id=version&gt;ES6&lt;/div&gt; integer.&lt;/div&gt; is method Number&lt;/div&gt; value whether
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;&lt;b&gt;Number method &lt;/b&gt;that checks whether a value is an integer.&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[0] + "" - "" + dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/b&gt;that &lt;/div&gt; &lt;div &lt;script&gt; = a an checks deck deck.innerText.split( dName document.getElementById(deck); id=additional-info&gt;&lt;/div&gt; id=back&gt;Number.isInteger(&lt;i&gt;value&lt;/i&gt;)&lt;/div&gt; id=example&gt;&lt;/div&gt; id=front&gt;&lt;b&gt;Number id=options&gt;&lt;/div&gt; id=version&gt;ES6&lt;/div&gt; integer.&lt;/div&gt; is method Number&lt;/div&gt; value whether
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;Number.isSafeInteger(&lt;i&gt;value&lt;/i&gt;)&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;script&gt; (smaller - 1).&lt;/div&gt; 2^53 = a ability as be checks deck deck.innerText.split( dName document.getElementById(deck); id=additional-info&gt;Safe id=back&gt;&lt;b&gt;Number id=example&gt;&lt;/div&gt; id=front&gt;Number.isSafeInteger(&lt;i&gt;value&lt;/i&gt;)&lt;/div&gt; id=options&gt;&lt;/div&gt; id=version&gt;ES6&lt;/div&gt; integer integer.&lt;/div&gt; is method&lt;/b&gt; number Number&lt;/div&gt; numbers refers represented safe than that to value whether
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;&lt;b&gt;Number method&lt;/b&gt; that checks whether a value is a safe integer.&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[0] + "" - "" + dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;script&gt; (smaller - 1).&lt;/div&gt; 2^53 = a ability as be checks deck deck.innerText.split( dName document.getElementById(deck); id=additional-info&gt;Safe id=back&gt;Number.isSafeInteger(&lt;i&gt;value&lt;/i&gt;)&lt;/div&gt; id=example&gt;&lt;/div&gt; id=front&gt;&lt;b&gt;Number id=options&gt;&lt;/div&gt; id=version&gt;ES6&lt;/div&gt; integer integer.&lt;/div&gt; is method&lt;/b&gt; number Number&lt;/div&gt; numbers refers represented safe than that to value whether
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;&lt;i&gt;number&lt;/i&gt;.toExponental()&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/b&gt;that &lt;/div&gt; &lt;/i&gt;value &lt;div &lt;script&gt; 0 20 = a after an and as between converts decimal deck deck.innerText.split( digits dName document.getElementById(deck); exponential id=additional-info&gt;&lt;i&gt;x id=back&gt;&lt;b&gt;Number id=example&gt;&lt;/div&gt; id=front&gt;&lt;i&gt;number&lt;/i&gt;.toExponental()&lt;/div&gt; id=options&gt;&lt;i&gt;number&lt;/i&gt;.toExponental(&lt;i&gt;x&lt;/i&gt;)&lt;/div&gt; id=version&gt;ES3&lt;/div&gt; If in integer into is It many method necessary notation notation.&lt;/div&gt; number Number&lt;/div&gt; of omitted, optional. point. represent representing set the to value.&lt;/div&gt;
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;&lt;b&gt;Number method &lt;/b&gt;that converts a number into an exponential notation.&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[0] + "" - "" + dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/b&gt;that &lt;/div&gt; &lt;/i&gt;value &lt;div &lt;script&gt; 0 20 = a after an and as between converts decimal deck deck.innerText.split( digits dName document.getElementById(deck); exponential id=additional-info&gt;&lt;i&gt;x id=back&gt;&lt;i&gt;number&lt;/i&gt;.toExponental()&lt;/div&gt; id=example&gt;&lt;/div&gt; id=front&gt;&lt;b&gt;Number id=options&gt;&lt;i&gt;number&lt;/i&gt;.toExponental(&lt;i&gt;x&lt;/i&gt;)&lt;/div&gt; id=version&gt;ES3&lt;/div&gt; If in integer into is It many method necessary notation notation.&lt;/div&gt; number Number&lt;/div&gt; of omitted, optional. point. represent representing set the to value.&lt;/div&gt;
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;&lt;i&gt;number&lt;/i&gt;.toFixed()&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;script&gt; (or = a after decimal decimals.&lt;/div&gt; deck deck.innerText.split( digits dName document.getElementById(deck); formats id=additional-info&gt;The id=back&gt;&lt;b&gt;Number id=example&gt;&lt;/div&gt; id=front&gt;&lt;i&gt;number&lt;/i&gt;.toFixed()&lt;/div&gt; id=options&gt;&lt;i&gt;number&lt;/i&gt;.toFixed(&lt;i&gt;x=0&lt;/i&gt;)&lt;/div&gt; id=version&gt;ES3&lt;/div&gt; method&amp;nbsp;&lt;/b&gt;that number Number&lt;/div&gt; numbers of point.&lt;/div&gt; representation the with without) x
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;&lt;b&gt;Number method&amp;nbsp;&lt;/b&gt;that formats a number with x numbers of digits after the decimal point.&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[0] + "" - "" + dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;script&gt; (or = a after decimal decimals.&lt;/div&gt; deck deck.innerText.split( digits dName document.getElementById(deck); formats id=additional-info&gt;The id=back&gt;&lt;i&gt;number&lt;/i&gt;.toFixed()&lt;/div&gt; id=example&gt;&lt;/div&gt; id=front&gt;&lt;b&gt;Number id=options&gt;&lt;i&gt;number&lt;/i&gt;.toFixed(&lt;i&gt;x=0&lt;/i&gt;)&lt;/div&gt; id=version&gt;ES3&lt;/div&gt; method&amp;nbsp;&lt;/b&gt;that number Number&lt;/div&gt; numbers of point.&lt;/div&gt; representation the with without) x
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;&lt;div&gt;&lt;div&gt;&lt;i&gt;number&lt;/i&gt;.toString()&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;script&gt; (normal 10, 2 = a as binary,&amp;nbsp;16 deck deck.innerText.split( dName document.getElementById(deck); hace hex).&amp;nbsp;&lt;/div&gt; id=additional-info&gt;All id=back&gt;&lt;b&gt;Number id=example&gt;&lt;/div&gt; id=front&gt;&lt;div&gt;&lt;div&gt;&lt;i&gt;number&lt;/i&gt;.toString()&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; id=options&gt;&lt;i&gt;number&lt;/i&gt;.toString(&lt;em&gt;radix=10&lt;/em&gt;)&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; is JavaScript like method&lt;/b&gt; method.&lt;br&gt;The modulo number Number&lt;/div&gt; objects on operates radix returns string.&lt;/div&gt; that the toString
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;&lt;b&gt;Number method&lt;/b&gt; that returns the number as a string.&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[0] + "" - "" + dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;script&gt; (normal 10, 2 = a as binary,&amp;nbsp;16 deck deck.innerText.split( dName document.getElementById(deck); hace hex).&amp;nbsp;&lt;/div&gt; id=additional-info&gt;All id=back&gt;&lt;div&gt;&lt;div&gt;&lt;i&gt;number&lt;/i&gt;.toString()&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; id=example&gt;&lt;/div&gt; id=front&gt;&lt;b&gt;Number id=options&gt;&lt;i&gt;number&lt;/i&gt;.toString(&lt;em&gt;radix=10&lt;/em&gt;)&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; is JavaScript like method&lt;/b&gt; method.&lt;br&gt;The modulo number Number&lt;/div&gt; objects on operates radix returns string.&lt;/div&gt; that the toString
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;&lt;div&gt;&lt;div&gt;&lt;i&gt;number&lt;/i&gt;.valueOf()&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;script&gt; = a actuall and by called code.&amp;nbsp;&lt;/div&gt; deck deck.innerText.split( dName document.getElementById(deck); hood, id=additional-info&gt;Usually id=back&gt;&lt;b&gt;Number id=example&gt;&lt;/div&gt; id=front&gt;&lt;div&gt;&lt;div&gt;&lt;i&gt;number&lt;/i&gt;.valueOf()&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; id=options&gt;&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; in JavaScript method&amp;nbsp;&lt;/b&gt;that not Number&lt;/div&gt; number.&lt;/div&gt; of primitive returns the under value viewed
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;&lt;b&gt;Number method&amp;nbsp;&lt;/b&gt;that returns the primitive value of a number.&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[0] + "" - "" + dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;script&gt; = a actuall and by called code.&amp;nbsp;&lt;/div&gt; deck deck.innerText.split( dName document.getElementById(deck); hood, id=additional-info&gt;Usually id=back&gt;&lt;div&gt;&lt;div&gt;&lt;i&gt;number&lt;/i&gt;.valueOf()&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; id=example&gt;&lt;/div&gt; id=front&gt;&lt;b&gt;Number id=options&gt;&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; in JavaScript method&amp;nbsp;&lt;/b&gt;that not Number&lt;/div&gt; number.&lt;/div&gt; of primitive returns the under value viewed
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;Number.constructor&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;script&gt; = created deck deck.innerText.split( dName document.getElementById(deck); function id=additional-info&gt;&lt;/div&gt; id=back&gt;&lt;b&gt;Number id=example&gt;&lt;/div&gt; id=front&gt;Number.constructor&lt;/div&gt; id=options&gt;&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; JavaScript's number Number&lt;/div&gt; property&lt;/b&gt; prototype.&lt;/div&gt; returns that the
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;&lt;b&gt;Number property&lt;/b&gt; that returns the function that created JavaScript's Number prototype.&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[0] + "" - "" + dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;script&gt; = created deck deck.innerText.split( dName document.getElementById(deck); function id=additional-info&gt;&lt;/div&gt; id=back&gt;Number.constructor&lt;/div&gt; id=example&gt;&lt;/div&gt; id=front&gt;&lt;b&gt;Number id=options&gt;&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; JavaScript's number Number&lt;/div&gt; property&lt;/b&gt; prototype.&lt;/div&gt; returns that the
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;&lt;div&gt;&lt;div&gt;Number.NEGATIVE_INFINITY&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;script&gt; = deck deck.innerText.split( dName document.getElementById(deck); id=additional-info&gt;&lt;/div&gt; id=back&gt;&lt;b&gt;Number id=example&gt;&lt;/div&gt; id=front&gt;&lt;div&gt;&lt;div&gt;Number.NEGATIVE_INFINITY&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; id=options&gt;&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; infinity.&lt;/div&gt; negative Number&lt;/div&gt; property&lt;/b&gt; returns that
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;&lt;b&gt;Number property&lt;/b&gt; that returns negative infinity.&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[0] + "" - "" + dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;script&gt; = deck deck.innerText.split( dName document.getElementById(deck); id=additional-info&gt;&lt;/div&gt; id=back&gt;&lt;div&gt;&lt;div&gt;Number.NEGATIVE_INFINITY&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; id=example&gt;&lt;/div&gt; id=front&gt;&lt;b&gt;Number id=options&gt;&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; infinity.&lt;/div&gt; negative Number&lt;/div&gt; property&lt;/b&gt; returns that
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;Number.NaN&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/b&gt;that &lt;/div&gt; &lt;div &lt;script&gt; = as deck deck.innerText.split( dName document.getElementById(deck); global id=additional-info&gt;Returns id=back&gt;&lt;b&gt;Number id=example&gt;&lt;/div&gt; id=front&gt;Number.NaN&lt;/div&gt; id=options&gt;&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; method method.&lt;/div&gt; NaN NaN.&lt;/div&gt; Number&lt;/div&gt; returns same the
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;&lt;b&gt;Number method &lt;/b&gt;that returns NaN.&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[0] + "" - "" + dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/b&gt;that &lt;/div&gt; &lt;div &lt;script&gt; = as deck deck.innerText.split( dName document.getElementById(deck); global id=additional-info&gt;Returns id=back&gt;Number.NaN&lt;/div&gt; id=example&gt;&lt;/div&gt; id=front&gt;&lt;b&gt;Number id=options&gt;&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; method method.&lt;/div&gt; NaN NaN.&lt;/div&gt; Number&lt;/div&gt; returns same the
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;Number.POSITIVE_INFINITY&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;script&gt; = deck deck.innerText.split( dName document.getElementById(deck); id=additional-info&gt;&lt;/div&gt; id=back&gt;&lt;b&gt;Number id=example&gt;&lt;/div&gt; id=front&gt;Number.POSITIVE_INFINITY&lt;/div&gt; id=options&gt;&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; infinity.&lt;/div&gt; method&lt;/b&gt; Number&lt;/div&gt; positive returns that
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;&lt;b&gt;Number method&lt;/b&gt; that returns positive infinity.&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[0] + "" - "" + dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;div &lt;script&gt; = deck deck.innerText.split( dName document.getElementById(deck); id=additional-info&gt;&lt;/div&gt; id=back&gt;Number.POSITIVE_INFINITY&lt;/div&gt; id=example&gt;&lt;/div&gt; id=front&gt;&lt;b&gt;Number id=options&gt;&lt;/div&gt; id=version&gt;ES1&lt;/div&gt; infinity.&lt;/div&gt; method&lt;/b&gt; Number&lt;/div&gt; positive returns that
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;Number.prototype&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;br&gt;&lt;/div&gt;&lt;/div&gt; &lt;div &lt;script&gt; = add advised allows an and are change control.&lt;/div&gt; deck deck.innerText.split( dName do document.getElementById(deck); have id=additional-info&gt;All id=back&gt;&lt;div&gt;&lt;b&gt;Number id=example&gt;&lt;/div&gt; id=front&gt;Number.prototype&lt;/div&gt; id=options&gt;&lt;div&gt;&lt;div&gt;Number.prototype.&lt;em&gt;name&amp;nbsp;&lt;/em&gt;=&lt;em&gt;&amp;nbsp;value&lt;/em&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; id=version&gt;&lt;/div&gt; JavaScript methods new not Number&lt;/div&gt; numbers. object objects of properties property&lt;/b&gt; property.&lt;br&gt;You prototype that the to you
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Built-in Objects::Number&lt;/div&gt;         &lt;div id=""front""&gt;&lt;div&gt;&lt;b&gt;Number property&lt;/b&gt; that allows you to add new properties and methods to numbers. &lt;br&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt; &lt;script&gt;         deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[0] + "" - "" + dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Built-in Objects		&lt;/div&gt; &lt;br&gt;&lt;/div&gt;&lt;/div&gt; &lt;div &lt;script&gt; = add advised allows an and are change control.&lt;/div&gt; deck deck.innerText.split( dName do document.getElementById(deck); have id=additional-info&gt;All id=back&gt;Number.prototype&lt;/div&gt; id=example&gt;&lt;/div&gt; id=front&gt;&lt;div&gt;&lt;b&gt;Number id=options&gt;&lt;div&gt;&lt;div&gt;Number.prototype.&lt;em&gt;name&amp;nbsp;&lt;/em&gt;=&lt;em&gt;&amp;nbsp;value&lt;/em&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; id=version&gt;&lt;/div&gt; JavaScript methods new not Number&lt;/div&gt; numbers. object objects of properties property&lt;/b&gt; property.&lt;br&gt;You prototype that the to you
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Language Structure::Operators&lt;/div&gt;         &lt;div id=""front""&gt;                 Fill out the following code to complete the ternary operation:&lt;br&gt;&lt;br&gt;&lt;i&gt;conditionToEvaluate&lt;/i&gt; &lt;span class=cloze&gt;[...]&lt;/span&gt; &lt;i&gt;ifTrueValue&lt;/i&gt; &lt;span class=cloze&gt;[...]&lt;/span&gt; &lt;i&gt;ifFalseValue&lt;/i&gt;         &lt;/div&gt; &lt;/div&gt; &lt;script&gt;                 deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Language Structure		&lt;div code complete following id=front&gt;Fill operation Operators&lt;/div&gt; out ternary the to
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Language Structure::Operators&lt;/div&gt;         &lt;div id=""front""&gt;                 Fill out the following code to complete the ternary operation:&lt;br&gt;&lt;br&gt;&lt;span class=cloze&gt;[...]&lt;/span&gt; ? &lt;span class=cloze&gt;[...]&lt;/span&gt; : &lt;span class=cloze&gt;[...]&lt;/span&gt;         &lt;/div&gt; &lt;/div&gt; &lt;script&gt;                 deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Language Structure		&lt;div code complete following id=front&gt;Fill operation Operators&lt;/div&gt; out ternary the to
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Language Structure::Operators&lt;/div&gt;         &lt;div id=""front""&gt;                 String Operators&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=cloze&gt;[...]&lt;/span&gt;: +&lt;/li&gt;&lt;li&gt;&lt;span class=cloze&gt;[...]&lt;/span&gt;: +=&lt;/li&gt;&lt;/ul&gt;         &lt;/div&gt; &lt;/div&gt; &lt;script&gt;                 deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Language Structure		&lt;div class=cloze&gt;Addition&lt;/span&gt; id=front&gt;String Operators&lt;/div&gt; Operators&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;span
"&lt;div id=""items""&gt;         &lt;div id=""path""&gt;&lt;/div&gt;         &lt;div id=""deck""&gt;JavaScript::Syntax::Language Structure::Operators&lt;/div&gt;         &lt;div id=""front""&gt;                 String Operators&lt;br&gt;&lt;ul&gt;&lt;li&gt;Addition: &lt;span class=cloze&gt;[...]&lt;/span&gt;&lt;/li&gt;&lt;li&gt;Add to value: &lt;span class=cloze&gt;[...]&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;         &lt;/div&gt; &lt;/div&gt; &lt;script&gt;                 deck = document.getElementById(""deck"");         dName = deck.innerText.split(""::"")         deck.innerHTML = dName[dName.length-1];         document.getElementById(""path"").innerHTML = dName.join("" &gt; "");         function addTitle(id=false, title="""") {                 let el = document.getElementById(id);                 if (el.innerText) {                         let t = document.createElement(""div"");                         t.classList.add(""title"");                         t.innerHTML = title;                          let b = document.createElement(""div"");                         b.classList.add(""body"");                         b.innerHTML = el.innerHTML;                          while(el.firstChild) {                                 el.removeChild(el.firstChild);                         }                         el.append(t, b);                 }          }         addTitle(""front"", ""Q. ""); &lt;/script&gt;        ""&lt;div id=""""items""""&gt;         &lt;div id=""""path""""&gt;&lt;/div&gt;         &lt;div id=""""deck""""&gt;JavaScript"		Syntax		Language Structure		&lt;div id=front&gt;String Operators&lt;/div&gt; Operators&lt;br&gt;&lt;ul&gt;&lt;li&gt;Addition