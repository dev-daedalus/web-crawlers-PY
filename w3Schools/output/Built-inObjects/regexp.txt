<b>Jsref_obj_regexp.asp modifier</b>: new RegExp("<i>regexp</i>", "g")<br/> <br/> or simply:<br/> <br/> /<i>regexp</i>/g | <b>Jsref_obj_regexp.asp modifier</b> that perform a global match (find all matches rather than stopping after the first match). | new RegExp("<i>regexp</i>", "g")<br/> <br/> or simply:<br/> <br/> /<i>regexp</i>/g |  | let pattern = /is/g;<br/> let result = text.match(pattern); |  
<b>Jsref_obj_regexp.asp modifier</b>: new RegExp("<i>regexp</i>", "i")<br/> <br/> or simply:<br/> <br/> /<i>regexp</i>/i | <b>Jsref_obj_regexp.asp modifier</b> that perform case-insensitive matching. | new RegExp("<i>regexp</i>", "i")<br/> <br/> or simply:<br/> <br/> /<i>regexp</i>/i |  | let text = "Visit W3Schools";<br/> let pattern = /w3schools/i;<br/> let result = text.match(pattern); |  
<b>Jsref_obj_regexp.asp modifier</b>: new RegExp("<i>regexp</i>", "m")<br/> <br/> or simply:<br/> <br/> /<i>regexp</i>/m | <b>Jsref_obj_regexp.asp modifier</b> that perform multiline matching. | new RegExp("<i>regexp</i>", "m")<br/> <br/> or simply:<br/> <br/> /<i>regexp</i>/m |  | let text = `Is this<br/> all there<br/> is`<br/> <br/> let pattern = /^is/m; |  
<b>Jsref_obj_regexp.asp expression</b>: new RegExp("[<em>abc</em>]")<br/> <br/> or simply:<br/> <br/> /[<em>abc</em>]/ | <b>Jsref_obj_regexp.asp expression</b> that find any character between the brackets. | new RegExp("[<em>abc</em>]")<br/> <br/> or simply:<br/> <br/> /[<em>abc</em>]/ |  | let text = "Is this all there is?";<br/> let pattern = /[h]/g; |  
<b>Jsref_obj_regexp.asp expression</b>: new RegExp("[^<em>xyz</em>]")<br/> <br/> or simply:<br/> <br/> /[^<em>xyz</em>]/ | <b>Jsref_obj_regexp.asp expression</b> that find any character not between the brackets. | new RegExp("[^<em>xyz</em>]")<br/> <br/> or simply:<br/> <br/> /[^<em>xyz</em>]/ |  | let text = "Is this all there is?";<br/> let pattern = /[^h]/g; |  
<b>Jsref_obj_regexp.asp expression</b>: new RegExp("[<em>0-9</em>]")<br/> <br/> or simply:<br/> <br/> /[<em>0-9</em>]/ | <b>Jsref_obj_regexp.asp expression</b> that find any character between the brackets (any digit). | new RegExp("[<em>0-9</em>]")<br/> <br/> or simply:<br/> <br/> /[<em>0-9</em>]/ |  | let text = "123456789";<br/> let pattern = /[1-4]/g; |  
<b>Jsref_obj_regexp.asp expression</b>: new RegExp("[^<em>0-9</em>]")<br/> <br/> or simply:<br/> <br/> /[^<em>0-9</em>]/ | <b>Jsref_obj_regexp.asp expression</b> that find any character not between the brackets (any non-digit). | new RegExp("[^<em>0-9</em>]")<br/> <br/> or simply:<br/> <br/> /[^<em>0-9</em>]/ |  | let text = "123456789";<br/> let pattern = /[^1-4]/g; |  
<b>Jsref_obj_regexp.asp expression</b>: new RegExp("(<em>x</em>|<em>y</em>)")<br/> <br/> or simply:<br/> <br/>  /(<em>x</em>|<em>y</em>)/ | <b>Jsref_obj_regexp.asp expression</b> that find any of the alternatives specified. | new RegExp("(<em>x</em>|<em>y</em>)")<br/> <br/> or simply:<br/> <br/>  /(<em>x</em>|<em>y</em>)/ |  | let text = "re, green, red, green, gren, gr, blue, yellow";<br/> let pattern= /(red|green)/g; |  
<b>Jsref_obj_regexp.asp metacharacter</b>: new RegExp("<i>regexp</i>.")<br/> <br/> or simply:<br/> <br/> /<i>regexp</i>./ | <b>Jsref_obj_regexp.asp metacharacter</b> that find a single character, except newline or line terminator. | new RegExp("<i>regexp</i>.")<br/> <br/> or simply:<br/> <br/> /<i>regexp</i>./ |  | let text = "That's hot!";<br/> let pattern = /h.t/g; |  
<b>Jsref_obj_regexp.asp metacharacter</b>: new RegExp("\\w")<br/> <br/> or simply:<br/> <br/> /\w/ | <b>Jsref_obj_regexp.asp metacharacter</b> that find a word character. | new RegExp("\\w")<br/> <br/> or simply:<br/> <br/> /\w/ |  | let text = "Give 100%!";<br/> let pattern = /\w/g; |  
<b>Jsref_obj_regexp.asp metacharacter</b>: new RegExp("\\W")<br/> <br/> or simply:<br/> <br/>  /\W/ | <b>Jsref_obj_regexp.asp metacharacter</b> that find a non-word character. | new RegExp("\\W")<br/> <br/> or simply:<br/> <br/>  /\W/ |  | let text = "Give 100%!";<br/> let pattern = /\W/g; |  
<b>Jsref_obj_regexp.asp metacharacter</b>: new RegExp("\\d")<br/> <br/> or simply:<br/> <br/>  /\d/ | <b>Jsref_obj_regexp.asp metacharacter</b> that find a digit. | new RegExp("\\d")<br/> <br/> or simply:<br/> <br/>  /\d/ |  | let text = "Give 100%!";<br/> let pattern= /\d/g; |  
<b>Jsref_obj_regexp.asp metacharacter</b>: new RegExp("\\D")<br/> <br/> or simply:<br/> <br/>  /\D/ | <b>Jsref_obj_regexp.asp metacharacter</b> that find a non-digit character. | new RegExp("\\D")<br/> <br/> or simply:<br/> <br/>  /\D/ |  | let text = "Give 100%!";<br/> let pattern = /\D/g; |  
<b>Jsref_obj_regexp.asp metacharacter</b>: new RegExp("\\s")<br/> <br/> or simply:<br/> <br/>  /\s/ | <b>Jsref_obj_regexp.asp metacharacter</b> that find a whitespace character. | new RegExp("\\s")<br/> <br/> or simply:<br/> <br/>  /\s/ |  | let text = "Is this all there is?";<br/> let pattern = /\s/g; |  
<b>Jsref_obj_regexp.asp metacharacter</b>: new RegExp("\\S")<br/> <br/> or simply:<br/> <br/> /\S/ | <b>Jsref_obj_regexp.asp metacharacter</b> that find a non-whitespace character. | new RegExp("\\S")<br/> <br/> or simply:<br/> <br/> /\S/ |  | let text = "Is this all there is?";<br/> let pattern = /\S/g; |  
<b>Jsref_obj_regexp.asp metacharacter</b>: new RegExp("\\b<i>regexp</i>")<br/> <br/> or simply:<br/> <br/> /\b<i>regexp</i>/ | <b>Jsref_obj_regexp.asp metacharacter</b> that find a match at the beginning/end of a word, beginning like this: \bhi,      end like this: hi\b. | new RegExp("\\b<i>regexp</i>")<br/> <br/> or simply:<br/> <br/> /\b<i>regexp</i>/ |  | let text = "HELLO, LOOK AT YOU";<br/> let pattern = /\bLO/; |  
<b>Jsref_obj_regexp.asp metacharacter</b>: new RegExp("\\B<i>regexp</i>")<br/> <br/> or simply:<br/> <br/> /\B<i>regexp</i>/ | <b>Jsref_obj_regexp.asp metacharacter</b> that find a match, but not at the beginning/end of a word. | new RegExp("\\B<i>regexp</i>")<br/> <br/> or simply:<br/> <br/> /\B<i>regexp</i>/ |  | let text = "HELLO, LOOK AT YOU!";<br/> let pattern = /\BLO/; |  
<b>Jsref_obj_regexp.asp metacharacter</b>: new RegExp("\\0")<br/> <br/> or simply:<br/> <br/>  /\0/ | <b>Jsref_obj_regexp.asp metacharacter</b> that find a null character. | new RegExp("\\0")<br/> <br/> or simply:<br/> <br/>  /\0/ |  | let text = "Visit W3Schools.\0Learn Javascript.";<br/> let pattern = /\0/; |  
<b>Jsref_obj_regexp.asp metacharacter</b>: new RegExp("\\n")<br/> <br/> or simply:<br/> <br/> /\n/ | <b>Jsref_obj_regexp.asp metacharacter</b> that find a new line character. | new RegExp("\\n")<br/> <br/> or simply:<br/> <br/> /\n/ |  | let text = "Visit W3Schools.\nLearn Javascript.";<br/> let pattern = /\n/; |  
<b>Jsref_obj_regexp.asp metacharacter</b>: new RegExp("\\f")<br/> <br/> or simply:<br/> <br/>  /\f/ | <b>Jsref_obj_regexp.asp metacharacter</b> that find a form feed character. | new RegExp("\\f")<br/> <br/> or simply:<br/> <br/>  /\f/ |  | let text = "Visit W3Schools.\fLearn Javascript.";<br/> let pattern = /\f/; |  
<b>Jsref_obj_regexp.asp metacharacter</b>: new RegExp("\\r")<br/> <br/> or simply:<br/> <br/> /\r/ | <b>Jsref_obj_regexp.asp metacharacter</b> that find a carriage return character. | new RegExp("\\r")<br/> <br/> or simply:<br/> <br/> /\r/ |  | let text = "Visit W3Schools.\rLearn Javascript.";<br/> let pattern = /\r/; |  
<b>Jsref_obj_regexp.asp metacharacter</b>: new RegExp("\\t")<br/> <br/> or simply:<br/> <br/>  /\t/ | <b>Jsref_obj_regexp.asp metacharacter</b> that find a tab character. | new RegExp("\\t")<br/> <br/> or simply:<br/> <br/>  /\t/ |  | let text = "Visit W3Schools.\tLearn Javascript.";<br/> let pattern = /\t/; |  
<b>Jsref_obj_regexp.asp metacharacter</b>: new RegExp("\\v")<br/> <br/> or simply:<br/> <br/>  /\v/ | <b>Jsref_obj_regexp.asp metacharacter</b> that find a vertical tab character. | new RegExp("\\v")<br/> <br/> or simply:<br/> <br/>  /\v/ |  | let text = "Visit W3Schools.\vLearn Javascript.";<br/> let pattern = /\v/; |  
<b>Jsref_obj_regexp.asp metacharacter</b>: new RegExp("\\<i>xxx</i>")<br/> <br/> or simply:<br/> <br/> /\<i>xxx</i>/ | <b>Jsref_obj_regexp.asp metacharacter</b> that find the character specified by an octal number xxx. | new RegExp("\\<i>xxx</i>")<br/> <br/> or simply:<br/> <br/> /\<i>xxx</i>/ |  | let text = "Visit W3Schools. Hello World!"; <br/> let pattern = /\127/g; |  
<b>Jsref_obj_regexp.asp metacharacter</b>: new RegExp("\\x<i>dd</i>")<br/> <br/> or simply:<br/> <br/> /\x<i>dd</i>/ | <b>Jsref_obj_regexp.asp metacharacter</b> that find the character specified by a hexadecimal number dd. | new RegExp("\\x<i>dd</i>")<br/> <br/> or simply:<br/> <br/> /\x<i>dd</i>/ |  | let text = "Visit W3Schools. Hello World!";<br/> let pattern = /\x57/g; |  
<b>Jsref_obj_regexp.asp metacharacter</b>: new RegExp("\\u<i>dddd</i>")<br/> <br/> or simply:<br/> <br/> /\u<i>dddd</i>/ | <b>Jsref_obj_regexp.asp metacharacter</b> that find the unicode character specified by a hexadecimal number dddd. | new RegExp("\\u<i>dddd</i>")<br/> <br/> or simply:<br/> <br/> /\u<i>dddd</i>/ |  | let text = "Visit W3Schools. Hello World!";<br/> let pattern = /\u0057/g; |  
<b>Jsref_obj_regexp.asp quantifier</b>: new RegExp("<i>n</i>+")<br/> <br/> or simply:<br/> <br/> /<i>n</i>+/ | <b>Jsref_obj_regexp.asp quantifier</b> that matches any string that contains at least one n. | new RegExp("<i>n</i>+")<br/> <br/> or simply:<br/> <br/> /<i>n</i>+/ |  | let text = "Hellooo World! Hello W3Schools!"; <br/> let pattern = /o+/g; |  
<b>Jsref_obj_regexp.asp quantifier</b>: new RegExp("<i>n</i>*")<br/> <br/> or simply:<br/> <br/> /<i>n</i>*/ | <b>Jsref_obj_regexp.asp quantifier</b> that matches any string that contains zero or more occurrences of n. | new RegExp("<i>n</i>*")<br/> <br/> or simply:<br/> <br/> /<i>n</i>*/ |  | let text = "Hellooo World! Hello W3Schools!"; <br/> let pattern = /lo*/g; |  
<b>Jsref_obj_regexp.asp quantifier</b>: new RegExp("<i>n</i>?")<br/> <br/> or simply:<br/> <br/> /<i>n</i>?/ | <b>Jsref_obj_regexp.asp quantifier</b> that matches any string that contains zero or one occurrences of n. | new RegExp("<i>n</i>?")<br/> <br/> or simply:<br/> <br/> /<i>n</i>?/ |  | let text = "1, 100 or 1000?";<br/> let pattern = /10?/g; |  
<b>Jsref_obj_regexp.asp quantifier</b>: new RegExp("<i>n</i>{<i>X</i>}")<br/> <br/> or simply:<br/> <br/> /<i>n</i>{<i>X</i>}/ | <b>Jsref_obj_regexp.asp quantifier</b> that matches any string that contains a sequence of x n's. | new RegExp("<i>n</i>{<i>X</i>}")<br/> <br/> or simply:<br/> <br/> /<i>n</i>{<i>X</i>}/ |  | let text = "100, 1000 or 10000?";<br/> let pattern = /\d{4}/g; |  
<b>Jsref_obj_regexp.asp quantifier</b>: new RegExp("<i>n</i>{<i>X,Y</i>}")<br/> <br/> or simply:<br/> <br/> /<i>n</i>{<i>X,Y</i>}/ | <b>Jsref_obj_regexp.asp quantifier</b> that matches any string that contains a sequence of x to y n's. | new RegExp("<i>n</i>{<i>X,Y</i>}")<br/> <br/> or simply:<br/> <br/> /<i>n</i>{<i>X,Y</i>}/ |  | let text = "100, 1000 or 10000?";<br/> let pattern = /\d{3,4}/g; |  
<b>Jsref_obj_regexp.asp quantifier</b>: new RegExp("<i>n</i>{<i>X,</i>}")<br/> <br/> or simply:<br/> <br/> /<i>n</i>{<i>X,</i>}/ | <b>Jsref_obj_regexp.asp quantifier</b> that matches any string that contains a sequence of at least x n's. | new RegExp("<i>n</i>{<i>X,</i>}")<br/> <br/> or simply:<br/> <br/> /<i>n</i>{<i>X,</i>}/ |  | let text = "100, 1000 or 10000?";<br/> let pattern = /\d{3,}/g; |  
<b>Jsref_obj_regexp.asp quantifier</b>: new RegExp("<i>n</i>$")<br/> <br/> or<br/> <br/> /<i>n</i>$/ | <b>Jsref_obj_regexp.asp quantifier</b> that matches any string with n at the end of it. | new RegExp("<i>n</i>$")<br/> <br/> or<br/> <br/> /<i>n</i>$/ |  | let text = "Is this his";<br/> let pattern = /is$/; |  
<b>Jsref_obj_regexp.asp quantifier</b>: new RegExp("^<i>n</i>")<br/> <br/> or<br/> <br/> /^<i>n</i>/ | <b>Jsref_obj_regexp.asp quantifier</b> that matches any string with n at the beginning of it. | new RegExp("^<i>n</i>")<br/> <br/> or<br/> <br/> /^<i>n</i>/ |  | let text = "Is this his";<br/> let pattern = /^Is/g; |  
<b>Jsref_obj_regexp.asp quantifier</b>: new RegExp("<i>regexp</i>(?=<i>n)</i>")<br/> <br/> or<br/> <br/> /<i>regexp</i>(?=<i>n)</i>/ | <b>Jsref_obj_regexp.asp quantifier</b> that matches any string that is followed by a specific string n. | new RegExp("<i>regexp</i>(?=<i>n)</i>")<br/> <br/> or<br/> <br/> /<i>regexp</i>(?=<i>n)</i>/ |  | let text = "Is this all there is";<br/> let pattern = /is(?= all)/g; |  
<b>Jsref_obj_regexp.asp quantifier</b>: new RegExp("<i>regexp</i>(?!<i>n)</i>")<br/> <br/> or<br/> <br/> /<i>regexp</i>(?!<i>n)</i>/ | <b>Jsref_obj_regexp.asp quantifier</b> that matches any string that is not followed by a specific string n. | new RegExp("<i>regexp</i>(?!<i>n)</i>")<br/> <br/> or<br/> <br/> /<i>regexp</i>(?!<i>n)</i>/ |  | let text = "Is this all there is";<br/> let pattern = /is(?! all)/gi; |  
<b>Jsref_obj_regexp.asp property</b>: <em>RegExpObject</em>.constructor | <b>Jsref_obj_regexp.asp property</b> that returns the function that created the regexp object's prototype. | <em>RegExpObject</em>.constructor |  | let pattern = /Hello World/g;<br/> let text = pattern.constructor; |  
<b>Jsref_obj_regexp.asp property</b>: <em>RegExpObject</em>.global | <b>Jsref_obj_regexp.asp property</b> that checks whether the "g" modifier is set. | <em>RegExpObject</em>.global |  | let pattern = /W3S/g;<br/> let result = pattern.global; |  
<b>Jsref_obj_regexp.asp property</b>: <em>RegExpObject</em>.ignoreCase | <b>Jsref_obj_regexp.asp property</b> that checks whether the "i" modifier is set. | <em>RegExpObject</em>.ignoreCase |  | let pattern = /W3S/i;<br/> let result = pattern.ignoreCase; |  
<b>Jsref_obj_regexp.asp property</b>: <em>RegExpObject</em>.lastIndex | <b>Jsref_obj_regexp.asp property</b> that specifies the index at which to start the next match. | <em>RegExpObject</em>.lastIndex |  | let text = "The rain in Spain stays mainly in the plain";<br/> let pattern = /ain/g;<br/> <br/> let result = "";<br/> while (pattern.test(text)==true) {<br/>   result += "Found at pos " + pattern.lastIndex + "&lt;br&gt;";<br/> } |  
<b>Jsref_obj_regexp.asp property</b>: <em>RegExpObject</em>.multiline | <b>Jsref_obj_regexp.asp property</b> that checks whether the "m" modifier is set. | <em>RegExpObject</em>.multiline |  | let text = "Visit W3Schools!";<br/> let pattern = /W3S/gi; // "g" and "i" is set, "m" is not.<br/> let result = pattern.multiline; |  
<b>Jsref_obj_regexp.asp property</b>: <em>RegExpObject</em>.source | <b>Jsref_obj_regexp.asp property</b> that returns the text of the regexp pattern. | <em>RegExpObject</em>.source |  | let text = "Visit W3Schools";<br/> let pattern = /W3S/g;<br/> let result = pattern.source; |  
<b>Jsref_obj_regexp.asp method</b>: <em>RegExpObject</em>.compile(<em>regexp</em>,<em> modifier</em>) | <b>Jsref_obj_regexp.asp method</b> that deprecated in version 1.5. compiles a regular expression. | <em>RegExpObject</em>.compile(<em>regexp</em>,<em> modifier</em>) |  |  |  
<b>Jsref_obj_regexp.asp method</b>: <em>RegExpObject</em>.exec(<i>string</i>) | <b>Jsref_obj_regexp.asp method</b> that tests for a match in a string. returns the first match. | <em>RegExpObject</em>.exec(<i>string</i>) |  | let text = "The best things in life are free";<br/> let result = /e/.exec(text);<br/> |  
<b>Jsref_obj_regexp.asp method</b>: <em>RegExpObject</em>.test(<i>string</i>) | <b>Jsref_obj_regexp.asp method</b> that tests for a match in a string. returns true or false. | <em>RegExpObject</em>.test(<i>string</i>) |  | let text = "The best things in life are free"; let pattern = /e/;<br/> let result = pattern.test(text); |  
<b>Jsref_obj_regexp.asp method</b>: <em>RegExpObject</em>.toString() | <b>Jsref_obj_regexp.asp method</b> that returns the string value of the regular expression. | <em>RegExpObject</em>.toString() |  | let pattern = new RegExp("Hello World", "g");<br/> let text = pattern.toString(); |  
